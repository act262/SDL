def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    namespace "org.libsdl.app"
    compileSdkVersion 34
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=android-19"
                // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                abiFilters 'arm64-v8a'
            }
            cmake {
                arguments "-DANDROID_PLATFORM=android-19", "-DANDROID_STL=c++_shared"
                // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                abiFilters 'arm64-v8a'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    if (buildAsApplication) {
        applicationVariants.all { variant ->
            tasks["merge${variant.name.capitalize()}Assets"]
                .dependsOn("externalNativeBuild${variant.name.capitalize()}")
        }
    }

    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            // ndkBuild {
            //     path 'jni/Android.mk'
            // }
            cmake {
                path 'jni/CMakeLists.txt'
            }
        }

    }
    lint {
        abortOnError false
    }

    if (buildAsLibrary) {
        // Publishing prefab aar
        buildFeatures {
            prefabPublishing true
        }

        prefab {
            // target : ndk-build: SDL3' ; cmake: 'SDL3-shared'
            'SDL3' {
                name "SDL3-shared" // alise not supported
                headers "jni/SDL/include"
                libraryName "libSDL3"
            }
        }

        libraryVariants.all { variant ->
            variant.outputs.all {
                def fileName = "org.libsdl.app.aar";
                outputFileName = fileName
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
